---
# Вкл/Выкл использование downloader сервера (актуально если на удаленном хосте нет доступа к сети интернет или же количество хостов на которые необходимо доставить архив больше 1го)
use_downloader: true
# При использовании downloader в данную папку будет осуществлятся скачивание архива, в дальнейшем распространение архива на удаленные хосты осуществляется из данной папки downloader сервера.
downloader_source_folder: ~/DISTR
# Папка в которую будет осуществлена загрузка установочного архива
distribution_path: "/opt/DISTR"

consul_alt_os_packages:
  - curl
  - unzip
consul_redhat_os_packages:
  - curl
  - unzip
consul_debian_os_packages:
  - curl
  - unzip

### System user and group
# Параметры создания пользователя
consul_manage_user: false
consul_manage_group: false
consul_user: root
consul_group: root
consul_system: true
consul_shell: /bin/false
consul_ssh_key: false

# Конфигурационные параметры сервиса
## Параметры запуска сервиса
consul_state: started
consul_enabled: true

## Consul client role
consul_node_role: both
#consul_node_role: server
#consul_node_role: client

### Servers
consul_group_name: "consul"

## Directories ##
# A directory of configuration files to load.
# Consul will load all files in this directory with the suffix ".json" or ".hcl".
# The load order is alphabetical, and the the same merge routine is used as with the config-file option above.
# This option can be specified multiple times to load multiple directories.
# Sub-directories of the config directory are not loaded.
# For more information on the format of the configuration files, see the Configuration Files section.
consul_conf_dir: "/etc/consul.d"
# Specifies a local directory used to store agent log files.
# This must be specified as an absolute path.
consul_logs_dir: "/var/log/consul"
# This is required for all agents.
# The directory should be durable across reboots.
# This is especially critical for agents that are running in server mode as they must be able to persist cluster state.
# Additionally, the directory must support the use of filesystem locking, meaning some types of mounted folders (e.g. VirtualBox shared folders) may not be suitable.
consul_data_dir: "/DATA/consul"
# Specifies a local directory used to store agent binary file.
# This must be specified as an absolute path.
consul_bin_dir: "/opt/consul/{{ consul_version }}"

### General Parameters 
#TODO advertise_addr - https://www.consul.io/docs/agent/options.html#advertise_addr, auto_config, auto_encrypt, connect - https://www.consul.io/docs/agent/options.html#connect, config_entries - https://www.consul.io/docs/agent/options.html#config_entries / gossip_lan - https://www.consul.io/docs/agent/options.html#gossip_lan / gossip_wan - https://www.consul.io/docs/agent/options.html#gossip_wan / telemetry https://www.consul.io/docs/agent/options.html#telemetry / unix_sockets - https://www.consul.io/docs/agent/options.html#unix_sockets / watches - https://www.consul.io/docs/agent/options.html#watches

# The name of this node in the cluster.
# This must be unique within the cluster.
# By default this is the hostname of the machine.
consul_node_name: "{{ ansible_hostname }}"

# Available in Consul 0.7.3 and later, this is a unique identifier for this node across all time, even if the name of the node or address changes.
# This must be in the form of a hex string, 36 characters long, such as adf4238a-882b-9ddc-4a9d-5b6758e4159e.
# If this isn't supplied, which is the most common case, then the agent will generate an identifier at startup and persist it in the data directory so that it will remain the same across agent restarts.
# Information from the host will be used to generate a deterministic node ID if possible, unless -disable-host-node-id is set to true.
consul_node_id: ""
# Setting this to true will prevent Consul from using information from the host to generate a deterministic node ID, and will instead generate a random node ID which will be persisted in the data directory.
# This is useful when running multiple Consul agents on the same host for testing.
# This defaults to false in Consul prior to version 0.8.5 and in 0.8.5 and later defaults to true, so you must opt-in for host-based IDs.
# Host-based IDs are generated using gopsutil, which is shared with HashiCorp's Nomad, so if you opt-in to host-based IDs then Consul and Nomad will use information on the host to automatically assign the same ID in both systems.
consul_disable_host_node_id: true

# This flag is used to control if an agent is in server or client mode.
# When provided, an agent will act as a Consul server.
# Each Consul cluster must have at least one server and ideally no more than 5 per datacenter.
# All servers participate in the Raft consensus algorithm to ensure that transactions occur in a consistent, linearizable manner.
# Transactions modify cluster state, which is maintained on all server nodes to ensure availability in the case of node failure.
# Server nodes also participate in a WAN gossip pool with server nodes in other datacenters.
# Servers act as gateways to other datacenters and forward traffic as appropriate.
consul_server: "{{ (consul_node_role == 'server') or (consul_node_role == 'both') }}"
# When provided, this overrides the node_name for the TLS certificate.
# It can be used to ensure that the certificate name matches the hostname we declare.
consul_server_name: "" 

# This flag provides the number of expected servers in the datacenter.
# Either this value should not be provided or the value must agree with other servers in the cluster.
# When provided, Consul waits until the specified number of servers are available and then bootstraps the cluster.
# This allows an initial leader to be elected automatically. 
consul_bootstrap_expect: "{{ consul_servers_serf | count or 3 }}"

# Enables the built-in web UI server and the required HTTP routes.
# This eliminates the need to maintain the Consul web UI files separately from the binary.
consul_ui: true

# Available in Consul 0.7.3 and later, This object allows associating arbitrary metadata key/value pairs with the local node, which can then be used for filtering results from certain catalog endpoints.
consul_node_meta: {}

# This flag controls the datacenter in which the agent is running.
# If not provided, it defaults to "dc1". Consul has first-class support for multiple datacenters, but it relies on proper configuration.
# Nodes in the same datacenter should be on a single LAN.
consul_datacenter: "dc1"

# Once it joins successfully to a member in a list of members it will never attempt to join again.
# Agents will then solely maintain their membership via gossip.
# This is useful for cases where you know the address will eventually be available.
# This option can be specified multiple times to specify multiple agents to join.
# The value can contain IPv4, IPv6, or DNS addresses.
# In Consul 1.1.0 and later this can be set to a go-sockaddr template.
# If Consul is running on the non-default Serf LAN port, this must be specified as well.
# IPv6 must use the "bracketed" syntax.
# If multiple values are given, they are tried and retried in the order listed until the first succeeds.
consul_servers_serf: "\
  {% set _consul_master_nodes = [] %}\
  {% for host in groups[consul_group_name] %}\
    {% set _consul_node_role = hostvars[host]['consul_node_role'] | default('client') %}\
    {% if ( _consul_node_role == 'server' or _consul_node_role == 'both') %}\
      {{ _consul_master_nodes.append( (hostvars[host].advertise_ip|default(hostvars[host].ansible_default_ipv4.address)|string) + ':' + (hostvars[host].consul_ports_serf_lan|default('8301')|string) ) }}\
    {% endif %}\
  {% endfor %}\
  {{ _consul_master_nodes }}"
consul_retry_join: "{{ consul_servers_serf }}"

# When provided, Consul will ignore a previous leave and attempt to rejoin the cluster when starting.
# By default, Consul treats leave as a permanent intent and does not attempt to join the cluster again when starting.
# This flag allows the previous state to be used to rejoin the cluster.
consul_rejoin_after_leave: false

# Time to wait between join attempts. Defaults to 30s.
consul_retry_interval: "30s"

# Address of another wan agent to join upon starting up.
# This can be specified multiple times to specify multiple WAN agents to join.
# If Consul is unable to join with any of the specified addresses, agent startup will fail.
# By default, the agent won't -join-wan any nodes when it starts up.
consul_retry_join_wan: []

# Time to wait between -join-wan attempts. Defaults to 30s.
consul_retry_interval_wan: "30s"

# This interval controls how often check output from checks in a steady state is synchronized with the server.
# By default, this is set to 5 minutes ("5m").
# Many checks which are in a steady state produce slightly different output per run (timestamps, etc) which cause constant writes.
# This configuration allows deferring the sync of check output for a given interval to reduce write pressure.
# If a check ever changes state, the new state and associated output is synchronized immediately.
# To disable this behavior, set the value to "0s".
consul_check_update_interval: "5m"

##  Updates ##
# Disables providing an anonymous signature for de-duplication with the update check.
consul_disable_anonymous_signature: false
# Disables automatic checking for security bulletins and new version releases.
# This is disabled in Consul Enterprise.
consul_disable_update_check: false

# Consul 1.0.3 fixed a potential security vulnerability where malicious users could craft KV keys with unprintable chars that would confuse operators using the CLI or UI into taking wrong actions.
# Users who had data written in older versions of Consul that did not have this restriction will be unable to deletethose values by default in 1.0.3 or later.
# This setting enables those users to temporarily disable the filter such that delete operations can work on those keys again to get back to a healthy state.
# It is strongly recommended that this filter is not disabled permanently as it exposes the original security vulnerability.
# Defaults to false.
consul_disable_http_unprintable_char_filter: false

# Disables support for remote execution. When set to true, the agent will ignore any incoming remote exec requests.
# In versions of Consul prior to 0.8, this defaulted to false.
# In Consul 0.8 the default was changed to true, to make remote exec opt-in instead of opt-out.
consul_disable_remote_exec: true

# Discards the output of health checks before storing them.
# This reduces the number of writes to the Consul raft log in environments where health checks have volatile output like timestamps, process ids, ...
consul_discard_check_output: false

# Enables stale requests for all service discovery HTTP endpoints.
# This is equivalent to the max_stale configuration for DNS requests.
# If this value is zero (default), all service discovery HTTP endpoints are forwarded to the leader.
# If this value is greater than zero, any Consul server can handle the service discovery request.
# If a Consul server is behind the leader by more than discovery_max_stale, the query will be re-evaluated on the leader to get more up-to-date results.
# Consul agents also add a new X-Consul-Effective-Consistency response header which indicates if the agent did a stale read.
# discover-max-stale was introduced in Consul 1.0.7 as a way for Consul operators to force stale requests from clients at the agent level, and defaults to zero which matches default consistency behavior in earlier Consul versions.
consul_discovery_max_stale: "0"

# Like enable_script_checks, but only enable them when they are defined in the local configuration files.
# Script checks defined in HTTP API registrations will still not be allowed.
consul_enable_local_script_checks: false

# Specifies the secret key to use for encryption of Consul network traffic.
# This key must be 32-bytes that are Base64-encoded.
# The easiest way to create an encryption key is to use consul keygen.
# All nodes within a cluster must share the same encryption key to communicate.
# The provided key is automatically persisted to the data directory and loaded automatically whenever the agent is restarted.
# This means that to encrypt Consul's gossip protocol, this option only needs to be provided once on each agent's initial startup sequence.
# If it is provided after Consul has been initialized with an encryption key, then the provided key is ignored and a warning will be displayed.
consul_encrypt: ""
# This is an optional parameter that can be used to disable enforcing encryption for incoming gossip in order to upshift from unencrypted to encrypted gossip on a running cluster. Defaults to true.
consul_encrypt_verify_incoming: true
# This is an optional parameter that can be used to disable enforcing encryption for outgoing gossip in order to upshift from unencrypted to encrypted gossip on a running cluster. Defaults to true.
consul_encrypt_verify_outgoing: true
# If set, the keyring will not be persisted to a file.
# Any installed keys will be lost on shutdown, and only the given -encrypt key will be available on startup.
# This defaults to false.
consul_disable_keyring_file: false
# This flag controls the amount of time a blocking query will wait before Consul will force a response.
# This value can be overridden by the wait query parameter.
# Note that Consul applies some jitter on top of this time.
# Defaults to 300s.
consul_default_query_time: "300s"
# This flag controls the maximum amount of time a blocking query can wait before Consul will force a response.
# Consul applies jitter to the wait time.
# The jittered time will be capped to this time.
# Defaults to 600s.
consul_max_query_time: "600s"

# If enabled, when the agent receives a TERM signal, it will send a Leave message to the rest of the cluster and gracefully leave.
# The default behavior for this feature varies based on whether or not the agent is running as a client or a server (prior to Consul 0.7 the default value was unconditionally set to false).
# On agents in client-mode, this defaults to true and for agents in server-mode, this defaults to false.
consul_leave_on_terminate: "\
  {% set _consul_leave_on_terminate = '' %}\
  {% if ( consul_node_role == 'server' or consul_node_role == 'both') %}\
    {% set _consul_leave_on_terminate = false %}\
  {% elif consul_node_role == 'client' %}\
    {% set _consul_leave_on_terminate = true %}\
  {% endif %}\
  {{ _consul_leave_on_terminate }}"
# This is similar to leave_on_terminate but only affects interrupt handling.
# When Consul receives an interrupt signal (such as hitting Control-C in a terminal), Consul will gracefully leave the cluster.
# Setting this to true disables that behavior.
# The default behavior for this feature varies based on whether or not the agent is running as a client or a server (prior to Consul 0.7 the default value was unconditionally set to false).
# On agents in client-mode, this defaults to false and for agents in server-mode, this defaults to true (i.e. Ctrl-C on a server will keep the server in the cluster and therefore quorum, and Ctrl-C on a client will gracefully leave).
consul_skip_leave_on_interrupt: "\
{% set _consul_skip_leave_on_interrupt = '' %}\
{% if ( consul_node_role == 'server' or consul_node_role == 'both') %}\
  {% set _consul_skip_leave_on_interrupt = true %}\
{% elif consul_node_role == 'client' %}\
  {% set _cskip_leave_on_interrupt = false %}\
{% endif %}\
{{ _consul_skip_leave_on_interrupt }}"

# This controls the minimum number of raft commit entries between snapshots that are saved to disk.
# This is a low-level parameter that should rarely need to be changed.
# Very busy clusters experiencing excessive disk IO may increase this value to reduce disk IO, and minimize the chances of all servers taking snapshots at the same time.
# Increasing this trades off disk IO for disk space since the log will grow much larger and the space in the raft.db file can't be reclaimed till the next snapshot.
# Servers may take longer to recover from crashes or failover if this is increased significantly as more logs will need to be replayed.
# In Consul 1.1.0 and later this defaults to 16384, and in prior versions it was set to 8192.
consul_raft_snapshot_threshold: "16384"

# This controls how often servers check if they need to save a snapshot to disk.
# This is a low-level parameter that should rarely need to be changed.
# Very busy clusters experiencing excessive disk IO may increase this value to reduce disk IO, and minimize the chances of all servers taking snapshots at the same time.
# Increasing this trades off disk IO for disk space since the log will grow much larger and the space in the raft.db file can't be reclaimed till the next snapshot.
# Servers may take longer to recover from crashes or failover if this is increased significantly as more logs will need to be replayed.
# In Consul 1.1.0 and later this defaults to 30s, and in prior versions it was set to 5s.
consul_raft_snapshot_interval: "30s"

# This controls how many log entries are left in the log store on disk after a snapshot is made.
# This should only be adjusted when followers cannot catch up to the leader due to a very large snapshot size that and high write throughput causing log truncation before an snapshot can be fully installed.
# If you need to use this to recover a cluster, consider reducing write throughput or the amount of data stored on Consul as it is likely under a load it is not designed to handle.
# The default value is 10000 which is suitable for all normal workloads. Added in Consul 1.5.3.
consul_raft_trailing_logs: "10000"

# This controls how long it takes for a failed node to be completely removed from the cluster.
# This defaults to 72 hours and it is recommended that this is set to at least double the maximum expected recoverable outage time for a node or network partition.
# WARNING: Setting this time too low could cause Consul servers to be removed from quorum during an extended node failure or partition, which could complicate recovery of the cluster.
# The value is a time with a unit suffix, which can be "s", "m", "h" for seconds, minutes, or hours. The value must be >= 8 hours.
consul_reconnect_timeout: "72h"

# This is the WAN equivalent of the reconnect_timeout parameter, which controls how long it takes for a failed server to be completely removed from the WAN pool.
# This also defaults to 72 hours, and must be >= 8 hours.
consul_reconnect_timeout_wan: "72h"

# The minimum allowed session TTL. 
# This ensures sessions are not created with TTL's shorter than the specified limit.
# It is recommended to keep this limit at or above the default to encourage clients to send infrequent heartbeats. Defaults to 10s.
consul_session_ttl_min: "10s"

# If set to true, Consul will prefer a node's configured WAN address when servicing DNS and HTTP requests for a node in a remote datacenter.
# This allows the node to be reached within its own datacenter using its local address, and reached from other datacenters using its WAN address, which is useful in hybrid setups with mixed networks.
# This is disabled by default.
#Starting in Consul 0.7 and later, node addresses in responses to HTTP requests will also prefer a node's configured WAN address when querying for a node in a remote datacenter.
# An X-Consul-Translate-Addresses header will be present on all responses when translation is enabled to help clients know that the addresses may be translated.
# The TaggedAddresses field in responses also have a lan address for clients that need knowledge of that address, regardless of translation.
# The following endpoints translate addresses:
# /v1/catalog/nodes
# /v1/catalog/node/<node>
# /v1/catalog/service/<service>
# /v1/health/service/<service>
# /v1/query/<query or name>/execute
consul_translate_wan_addrs: false 
